/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘RUS_2884__VehicleChangeNotification_BackDocumentation.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir738 = null;
        public BindDirection bind_dir739 = null;
        public BindDirection bind_dir740 = null;
        public BindDirection bind_dir741 = null;
        public BindDirection bind_dir742 = null;
        public BindDirection bind_dir743 = null;
        public BindDirection bind_dir744 = null;
        public BindDirection bind_dir745 = null;
        public BindDirection bind_dir746 = null;
        public BindDirection bind_dir747 = null;
        public BindDirection bind_dir748 = null;
        public BindDirection bind_dir749 = null;
        public BindDirection bind_dir750 = null;
        public BindDirection bind_dir751 = null;
        public BindDirection bind_dir752 = null;
        public BindDirection bind_dir753 = null;
        public BindDirection bind_dir754 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity56 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity56");
            _flow.DataFetchActivity53 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity53");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity55 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity55");
            _flow.DataExporterActivity58 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity58");
            _flow.DataExporterCloseActivity59 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity59");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity54 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity54");
            _flow.DataDisconnectActivity57 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity57");
            _flow.Sequence52 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence52");
            _flow.CodeActivity29 = new HP.ST.Ext.BasicActivities.CodeActivity<CodeActivity29Input,CodeActivity29Output>(_context,"CodeActivity29");
            _flow.SetTestVariableActivity48 = new HP.ST.Ext.BasicActivities.SetTestVariableActivity(_context,"SetTestVariableActivity48");
            _flow.XMLToStringActivity19 = new HP.ST.Ext.TransformXmlActivity.XMLToStringActivity(_context,"XMLToStringActivity19");
            _flow.CodeActivity17 = new HP.ST.Ext.BasicActivities.CodeActivity<CodeActivity17Input,CodeActivity17Output>(_context,"CodeActivity17");
            _flow.IfElse44 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse44Input>(_context,"IfElse44");
            _flow.IfElseBranch45 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch45");
            _flow.IfElseBranch46 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch46");
            _flow.CallSTTest47 = new HP.ST.Ext.STRunnerActivity.RunSTActivity(_context,"CallSTTest47",false);
            _flow.CodeActivity26 = new HP.ST.Ext.BasicActivities.CodeActivity<CodeActivity26Input,CodeActivity26Output>(_context,"CodeActivity26");
            _flow.CodeActivity27 = new HP.ST.Ext.BasicActivities.CodeActivity<CodeActivity27Input,CodeActivity27Output>(_context,"CodeActivity27");
            _flow.CallSTTest34 = new HP.ST.Ext.STRunnerActivity.RunSTActivity(_context,"CallSTTest34",false);
            _flow.CodeActivity28 = new HP.ST.Ext.BasicActivities.CodeActivity<CodeActivity28Input,CodeActivity28Output>(_context,"CodeActivity28");
            _flow.CodeActivity51 = new HP.ST.Ext.BasicActivities.CodeActivity<CodeActivity51Input,CodeActivity51Output>(_context,"CodeActivity51");
            _flow.DataFetchActivity56.Comment = @"";
            _flow.DataFetchActivity56.IconPath = @"";
            _flow.DataFetchActivity56.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity56.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity56_QueryParameters_Document = new XmlDocument();
            DataFetchActivity56_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity56Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>47016ee6-35a5-41e1-b561-84cfdf74f49e</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>RUS_BACK_DOC_REQ</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>Driver={IBM DB2 ODBC DRIVER};Database=RUSDB;Hostname=rus-test.e.corpintra.net;Port=50000;Protocol=TCPIP;uid=rusappli;pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>
            SELECT  F_MESSAGE_ID, F_TIMESTAMP,  F_MESSAGE_TYPE
            FROM  RUS.R_MESSAGE
            WHERE  F_TIMESTAMP =  '2016-05-10 08:41:50.141'
            AND F_MESSAGE_TYPE LIKE 'BACK_DOCUMENTATION_REQUEST'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>SWlYNGBw4xulXh2i/Zyp7A==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity56_QueryParameters_Document.LoadXml(xmlDataFetchActivity56Params);
            _flow.DataFetchActivity56.QueryParameters = DataFetchActivity56_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("RUS_BACK_DOC_REQ", _flow.DataFetchActivity56);
            this.Activities.Add (_flow.DataFetchActivity56);
            _flow.DataFetchActivity53.Comment = @"";
            _flow.DataFetchActivity53.IconPath = @"";
            _flow.DataFetchActivity53.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity53.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity53_QueryParameters_Document = new XmlDocument();
            DataFetchActivity53_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity53Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>f53b7db6-8cdd-41f4-90cf-a10a964fcbe5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>VEHICLE_UPDATE_INFO_CONF</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>Driver={IBM DB2 ODBC DRIVER};Database=SWRTEST;Hostname=muc-daidb-01.nttdata-emea.com;Port=50000;Protocol=TCPIP;Uid=DB2;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>SELECT 
             *
            FROM
             SWRTEST.RVS_UC_VEHICLE_UPDATE_INFO_CONF
            WHERE 
            ACTIVE_CONFIG = 'TRUE'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>+/8hOTMC9Tzot3ZnWym5Yw==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity53_QueryParameters_Document.LoadXml(xmlDataFetchActivity53Params);
            _flow.DataFetchActivity53.QueryParameters = DataFetchActivity53_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("VEHICLE_UPDATE_INFO_CONF", _flow.DataFetchActivity53);
            this.Activities.Add (_flow.DataFetchActivity53);
            XmlDocument StartActivity1_ExecutionInputParameters_Document = new XmlDocument();
            StartActivity1_ExecutionInputParameters_Document.PreserveWhitespace = true;
            StartActivity1_ExecutionInputParameters_Document.LoadXml(
@"<Arguments><XML_Message>&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?&gt;&lt;asb:vehicleChangeNotification xmlns:asb=""http://rvs.daimler.com/asb/v1.2"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" destination=""RUS"" source=""DMS"" timestamp=""2001-12-17T09:30:47Z"" trackingID=""334fb290-d911-11e4-8830-0800200c9a66"" ucIdentifier=""VehicleChangeNotification"" ucVersion=""1.0.0"" version=""1.4.5"" xsi:schemaLocation=""http://rvs.daimler.com/asb/v1.2 ../RVS_ASB_Messages_v1.4.5.xsd""&gt;
	&lt;asb:ID&gt;6ad27a12-8eb8-433d-8d47-14a7abec3dd3&lt;/asb:ID&gt;
	&lt;asb:CreationDateTime&gt;2001-12-17T09:30:47Z&lt;/asb:CreationDateTime&gt;
	&lt;asb:VehicleTopology&gt;
		&lt;asb:Property&gt;
			&lt;asb:Unit&gt;Vehicle&lt;/asb:Unit&gt;
			&lt;asb:Key&gt;VIN&lt;/asb:Key&gt;
			&lt;asb:ChangeType&gt;Unchanged&lt;/asb:ChangeType&gt;
			&lt;asb:CurrentValue&gt;
				&lt;asb:VIN&gt;WDD12345678900001&lt;/asb:VIN&gt;
			&lt;/asb:CurrentValue&gt;
		&lt;/asb:Property&gt;
		&lt;asb:Gateway&gt;
			&lt;asb:Property&gt;
				&lt;asb:Key&gt;ID&lt;/asb:Key&gt;
				&lt;asb:ChangeType&gt;Unchanged&lt;/asb:ChangeType&gt;
				&lt;asb:CurrentValue&gt;
					&lt;asb:URN&gt;sn:imei:1234567890&lt;/asb:URN&gt;
				&lt;/asb:CurrentValue&gt;
			&lt;/asb:Property&gt;
			&lt;asb:Device&gt;
				&lt;asb:Property&gt;
					&lt;asb:Key&gt;PartNumber&lt;/asb:Key&gt;
					&lt;asb:ChangeType&gt;Unchanged&lt;/asb:ChangeType&gt;
					&lt;asb:CurrentValue&gt;
						&lt;asb:PartNumber&gt;1230000000&lt;/asb:PartNumber&gt;
					&lt;/asb:CurrentValue&gt;
				&lt;/asb:Property&gt;
				&lt;asb:Component&gt;
					&lt;asb:Property&gt;
						&lt;asb:Key&gt;PartNumber&lt;/asb:Key&gt;
						&lt;asb:ChangeType&gt;Changed&lt;/asb:ChangeType&gt;
						&lt;asb:PreviousValue&gt;
							&lt;asb:PartNumber&gt;1230000100&lt;/asb:PartNumber&gt;
						&lt;/asb:PreviousValue&gt;
						&lt;asb:CurrentValue&gt;
							&lt;asb:PartNumber&gt;1230000101&lt;/asb:PartNumber&gt;
						&lt;/asb:CurrentValue&gt;
					&lt;/asb:Property&gt;
				&lt;/asb:Component&gt;
			&lt;/asb:Device&gt;
		&lt;/asb:Gateway&gt;
	&lt;/asb:VehicleTopology&gt;
&lt;/asb:vehicleChangeNotification&gt;</XML_Message><enviornment>DEV</enviornment></Arguments>");
            _flow.StartActivity1.ExecutionInputParameters = StartActivity1_ExecutionInputParameters_Document;
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence52);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity55.Comment = @"";
            _flow.DataExporterActivity55.IconPath = @"";
            VTDPropertyInfoBase pi1492 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter755 = new VTDObjectGetter(pi1492);
            VTDPropertyInfoBase pi1493 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter738 = new VTDObjectSetter(pi1493);
            binding_setter738 = new StringFormaterDecorator(binding_setter738,"{Step.DataFetchActivity53.OutTable}");
            bind_dir738 = new BindDirection(_flow.DataFetchActivity53,binding_getter755,binding_setter738,BindTargetType.ToInProperty);
            _flow.DataExporterActivity55.InDirections.Add(bind_dir738);
            this.Activities.Add (_flow.DataExporterActivity55);
            _flow.DataExporterActivity58.Comment = @"";
            _flow.DataExporterActivity58.IconPath = @"";
            VTDPropertyInfoBase pi1494 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter756 = new VTDObjectGetter(pi1494);
            VTDPropertyInfoBase pi1495 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter739 = new VTDObjectSetter(pi1495);
            binding_setter739 = new StringFormaterDecorator(binding_setter739,"{Step.DataFetchActivity56.OutTable}");
            bind_dir739 = new BindDirection(_flow.DataFetchActivity56,binding_getter756,binding_setter739,BindTargetType.ToInProperty);
            _flow.DataExporterActivity58.InDirections.Add(bind_dir739);
            this.Activities.Add (_flow.DataExporterActivity58);
            _flow.DataExporterCloseActivity59.Comment = @"";
            _flow.DataExporterCloseActivity59.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity59);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity54.Comment = @"";
            _flow.DataDisconnectActivity54.IconPath = @"";
            VTDPropertyInfoBase pi1496 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter757 = new VTDObjectGetter(pi1496);
            VTDPropertyInfoBase pi1497 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter740 = new VTDObjectSetter(pi1497);
            binding_setter740 = new StringFormaterDecorator(binding_setter740,"{Step.DataFetchActivity53.OutTable}");
            bind_dir740 = new BindDirection(_flow.DataFetchActivity53,binding_getter757,binding_setter740,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity54.InDirections.Add(bind_dir740);
            this.Activities.Add (_flow.DataDisconnectActivity54);
            _flow.DataDisconnectActivity57.Comment = @"";
            _flow.DataDisconnectActivity57.IconPath = @"";
            VTDPropertyInfoBase pi1498 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter758 = new VTDObjectGetter(pi1498);
            VTDPropertyInfoBase pi1499 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter741 = new VTDObjectSetter(pi1499);
            binding_setter741 = new StringFormaterDecorator(binding_setter741,"{Step.DataFetchActivity56.OutTable}");
            bind_dir741 = new BindDirection(_flow.DataFetchActivity56,binding_getter758,binding_setter741,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity57.InDirections.Add(bind_dir741);
            this.Activities.Add (_flow.DataDisconnectActivity57);
            _flow.Sequence52.Comment = @"";
            _flow.Sequence52.IconPath = @"";
            _flow.Sequence52.Name = @"Sequence52";
            _flow.Sequence52.Activities.Add (_flow.CodeActivity29);
            _flow.Sequence52.Activities.Add (_flow.SetTestVariableActivity48);
            _flow.Sequence52.Activities.Add (_flow.XMLToStringActivity19);
            _flow.Sequence52.Activities.Add (_flow.CodeActivity17);
            _flow.Sequence52.Activities.Add (_flow.IfElse44);
            _flow.CodeActivity29.Comment = @"";
            _flow.CodeActivity29.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.CodeActivity29.Name = @"CA29 -TrackingID and date&time generator";
            set_CodeActivity29_checkpoints(_flow.CodeActivity29);
            _flow.CodeActivity29.ExecuteEvent += _userCode.CodeActivity29_OnExecuteEvent;
            _flow.SetTestVariableActivity48.VariableKey = @"Tracking_ID";
            _flow.SetTestVariableActivity48.VariableValue = @"{Step.OutputProperties.CodeActivity29.TrackingID}";
            _flow.SetTestVariableActivity48.Comment = @"";
            _flow.SetTestVariableActivity48.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetTestVariableActivity48.Name = @"STVA48 - Set VCN_Tracking_Id";
            VTDPropertyInfoBase pi1500 = new VTDPropertyInfoBase("Output.TrackingID");
            VTDBaseGetter binding_getter759 = new VTDObjectGetter(pi1500);
            VTDPropertyInfoBase pi1501 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter742 = new VTDObjectSetter(pi1501);
            binding_setter742 = new StringFormaterDecorator(binding_setter742,"{Step.OutputProperties.CodeActivity29.TrackingID}");
            bind_dir742 = new BindDirection(_flow.CodeActivity29,binding_getter759,binding_setter742,BindTargetType.ToInProperty);
            _flow.SetTestVariableActivity48.InDirections.Add(bind_dir742);
            _flow.XMLToStringActivity19.Comment = @"";
            _flow.XMLToStringActivity19.IconPath = @"AddIns\ServiceTest\TransformXml\ictb_xml_to_string_16.png";
            _flow.XMLToStringActivity19.Name = @"XML to String19";
            XmlDocument XMLToStringActivity19_XMLContent_Document = new XmlDocument();
            XMLToStringActivity19_XMLContent_Document.PreserveWhitespace = true;
            XMLToStringActivity19_XMLContent_Document.LoadXml(
@"<asb:vehicleChangeNotification xmlns:asb=""http://rvs.daimler.com/asb/v1.2"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" destination=""RUS"" source=""DMS"" timestamp=""2001-12-17T09:30:47Z"" trackingID=""{Step.OutputProperties.CodeActivity29.TrackingID}"" ucIdentifier=""vehicleChangedEvent"" ucVersion=""1.0.0"" version=""1.4.2"" xsi:schemaLocation=""http://rvs.daimler.com/asb/v1.2 ../RVS_ASB_Messages_v1.4.2.xsd"">
	<asb:ID>6ad27a12-8eb8-433d-8d47-14a7abec3dd3</asb:ID>
	<asb:CreationDateTime>2001-12-17T09:30:47Z</asb:CreationDateTime>
	<asb:VehicleTopology>
		<asb:Property>
			<asb:Unit>Vehicle</asb:Unit>
			<asb:Key>VIN</asb:Key>
			<asb:ChangeType>Unchanged</asb:ChangeType>
			<asb:CurrentValue>
				<asb:VIN>WDD12345678900001</asb:VIN>
			</asb:CurrentValue>
		</asb:Property>
		<asb:Gateway>
			<asb:Property>
				<asb:Key>ID</asb:Key>
				<asb:ChangeType>Unchanged</asb:ChangeType>
				<asb:CurrentValue>
					<asb:URN>sn:imei:1234567890</asb:URN>
				</asb:CurrentValue>
			</asb:Property>
			<asb:Device>
				<asb:Property>
					<asb:Key>PartNumber</asb:Key>
					<asb:ChangeType>Unchanged</asb:ChangeType>
					<asb:CurrentValue>
						<asb:PartNumber>1230000000</asb:PartNumber>
					</asb:CurrentValue>
				</asb:Property>
				<asb:Property>
					<asb:Key>DiagName</asb:Key>
					<asb:ChangeType>Unchanged</asb:ChangeType>
					<asb:CurrentValue>
						<asb:String>HERMES</asb:String>
					</asb:CurrentValue>
				</asb:Property>
				<asb:Component>
					<asb:Property>
						<asb:Key>PartNumber</asb:Key>
						<asb:ChangeType>Changed</asb:ChangeType>
						<asb:PreviousValue>
							<asb:PartNumber>1230000100</asb:PartNumber>
						</asb:PreviousValue>
						<asb:CurrentValue>
							<asb:PartNumber>1230000101</asb:PartNumber>
						</asb:CurrentValue>
					</asb:Property>
				</asb:Component>
				<asb:Component>
					<asb:Property>
						<asb:Key>PartNumber</asb:Key>
						<asb:ChangeType>Unchanged</asb:ChangeType>
						<asb:PreviousValue>
							<asb:PartNumber>1230000112</asb:PartNumber>
						</asb:PreviousValue>
						<asb:CurrentValue>
							<asb:PartNumber>1230000112</asb:PartNumber>
						</asb:CurrentValue>
					</asb:Property>
				</asb:Component>
				<asb:Component>
					<asb:Property>
						<asb:Key>PartNumber</asb:Key>
						<asb:ChangeType>Deleted</asb:ChangeType>
						<asb:PreviousValue>
							<asb:PartNumber>1230000113</asb:PartNumber>
						</asb:PreviousValue>
					</asb:Property>
				</asb:Component>
			</asb:Device>
		</asb:Gateway>
	</asb:VehicleTopology>
</asb:vehicleChangeNotification>");
            _flow.XMLToStringActivity19.XMLContent = XMLToStringActivity19_XMLContent_Document;
            VTDPropertyInfoBase pi1502 = new VTDPropertyInfoBase("Output.TrackingID");
            VTDBaseGetter binding_getter760 = new VTDObjectGetter(pi1502);
            VTDPropertyInfoBase pi1503 = new VTDPropertyInfoBase("XMLContent","/*[local-name(.)='vehicleChangeNotification'][1]/@*[local-name(.)='trackingID'][1]");
            VTDBaseSetter binding_setter743 = new VTDXPathSetter(pi1503,XmlTypeCode.Attribute);
            bind_dir743 = new BindDirection(_flow.CodeActivity29,binding_getter760,binding_setter743,BindTargetType.ToInProperty);
            _flow.XMLToStringActivity19.InDirections.Add(bind_dir743);
            _flow.CodeActivity17.Input.InputXML = @"{Step.OutputProperties.XMLToStringActivity19.Result}";
            _flow.CodeActivity17.Comment = @"";
            _flow.CodeActivity17.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.CodeActivity17.Name = @"CA17  - XML Escaper";
            VTDPropertyInfoBase pi1504 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter761 = new VTDObjectGetter(pi1504);
            VTDPropertyInfoBase pi1505 = new VTDPropertyInfoBase("Input.InputXML");
            VTDBaseSetter binding_setter744 = new VTDObjectSetter(pi1505);
            binding_setter744 = new StringFormaterDecorator(binding_setter744,"{Step.OutputProperties.XMLToStringActivity19.Result}");
            bind_dir744 = new BindDirection(_flow.XMLToStringActivity19,binding_getter761,binding_setter744,BindTargetType.ToInProperty);
            _flow.CodeActivity17.InDirections.Add(bind_dir744);
            set_CodeActivity17_checkpoints(_flow.CodeActivity17);
            _flow.CodeActivity17.ExecuteEvent += _userCode.CodeActivity17_OnExecuteEvent;
            _flow.IfElse44.ConditionAsString = @"{Step.OutputProperties.StartActivity1.enviornment} Equal TEST";
            _flow.IfElse44.Comment = @"";
            _flow.IfElse44.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse44.Name = @"TEST Environment?";
            _flow.IfElse44.Activities.Add (_flow.IfElseBranch45);
            _flow.IfElse44.Activities.Add (_flow.IfElseBranch46);
            _flow.IfElseBranch45.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1506 = new VTDPropertyInfoBase("ExecutionInputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='enviornment'][1]");
            VTDBaseGetter binding_getter762 = new VTDXPathGetter(pi1506,XmlTypeCode.String);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.StartActivity1.GetParam(binding_getter762),typeof(System.String));
            		var result0 = expr00;
            		System.String result1 = (System.String)("TEST");
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch45.Comment = @"";
            _flow.IfElseBranch45.IconPath = @"";
            _flow.IfElseBranch45.Name = @"Yes";
            _flow.IfElseBranch45.Activities.Add (_flow.CallSTTest47);
            _flow.IfElseBranch45.Activities.Add (_flow.CodeActivity26);
            _flow.IfElseBranch45.Activities.Add (_flow.CodeActivity27);
            _flow.IfElseBranch46.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch46.Comment = @"";
            _flow.IfElseBranch46.IconPath = @"";
            _flow.IfElseBranch46.Name = @"No";
            _flow.IfElseBranch46.Activities.Add (_flow.CallSTTest34);
            _flow.IfElseBranch46.Activities.Add (_flow.CodeActivity28);
            _flow.IfElseBranch46.Activities.Add (_flow.CodeActivity51);
            XmlDocument CallSTTest47_InputProperties_Document = new XmlDocument();
            CallSTTest47_InputProperties_Document.PreserveWhitespace = true;
            CallSTTest47_InputProperties_Document.LoadXml(
@"<Arguments><requestXML>{Step.OutputProperties.CodeActivity17.OutputEscapedXML}</requestXML></Arguments>");
            _flow.CallSTTest47.InputProperties = CallSTTest47_InputProperties_Document;
            _flow.CallSTTest47.Comment = @"";
            _flow.CallSTTest47.IconPath = @"AddIns\ServiceTest\STRunner\ictb_api_test_16x16.png";
            _flow.CallSTTest47.Name = @"MQ_Tests_for_VehicleChangeNotification";
            _flow.CallSTTest47.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallSTTest47.ScriptPath}")) ? @"..\MQ_Tests_for_VehicleChangeNotification" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallSTTest47.ScriptPath}");
            _flow.CallSTTest47.ActionName = @"";
            _flow.CallSTTest47.ResultLocation = @"RunStReport\";
            VTDPropertyInfoBase pi1507 = new VTDPropertyInfoBase("Output.OutputEscapedXML");
            VTDBaseGetter binding_getter763 = new VTDObjectGetter(pi1507);
            VTDPropertyInfoBase pi1508 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='requestXML'][1]");
            VTDBaseSetter binding_setter745 = new VTDXPathSetter(pi1508,XmlTypeCode.String);
            binding_setter745 = new StringFormaterDecorator(binding_setter745,"{Step.OutputProperties.CodeActivity17.OutputEscapedXML}");
            bind_dir745 = new BindDirection(_flow.CodeActivity17,binding_getter763,binding_setter745,BindTargetType.ToInProperty);
            _flow.CallSTTest47.InDirections.Add(bind_dir745);
            _flow.CodeActivity26.Input.VCN_REQ_PUT_TIMESTAMP =  new DateTime(1,1,1,0,0,0,0);
            _flow.CodeActivity26.Input.VCN_REQ_UUID = @"{ENV:Tracking_ID}";
            _flow.CodeActivity26.Comment = @"grab the back_doc_request from the DB and checkj whether it includes the " + Environment.NewLine + @"UserId or not---> applying the Xquery";
            _flow.CodeActivity26.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.CodeActivity26.Name = @"CA26 - UserID_Included?";
            VTDPropertyInfoBase pi1509 = new VTDPropertyInfoBase("Tracking_ID");
            VTDBaseGetter binding_getter764 = new EnvironmentVariableGetter(pi1509);
            VTDPropertyInfoBase pi1510 = new VTDPropertyInfoBase("Input.VCN_REQ_UUID");
            VTDBaseSetter binding_setter746 = new VTDObjectSetter(pi1510);
            binding_setter746 = new StringFormaterDecorator(binding_setter746,"{ENV:Tracking_ID}");
            bind_dir746 = new BindDirection(_flow.StartActivity1,binding_getter764,binding_setter746,BindTargetType.ToInProperty);
            _flow.CodeActivity26.InDirections.Add(bind_dir746);
            set_CodeActivity26_checkpoints(_flow.CodeActivity26);
            _flow.CodeActivity26.ExecuteEvent += _userCode.CodeActivity26_OnExecuteEvent;
            _flow.CodeActivity27.Input.Back_Doc_Req = @"{Step.OutputProperties.CodeActivity26.Back_Doc_Req}";
            _flow.CodeActivity27.Input.VehicleChangeNotification = @"{Step.OutputProperties.XMLToStringActivity19.Result}";
            _flow.CodeActivity27.Comment = @"In this step we have to somehow analyze and compare the VCN request" + Environment.NewLine + @"and corresponding BDR request to figure out whether the transformation" + Environment.NewLine + @"from VCN to BDR is done correctly or not.";
            _flow.CodeActivity27.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.CodeActivity27.Name = @"CA27 - Transformation was correct?";
            VTDPropertyInfoBase pi1511 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter765 = new VTDObjectGetter(pi1511);
            VTDPropertyInfoBase pi1512 = new VTDPropertyInfoBase("Input.VehicleChangeNotification");
            VTDBaseSetter binding_setter747 = new VTDObjectSetter(pi1512);
            binding_setter747 = new StringFormaterDecorator(binding_setter747,"{Step.OutputProperties.XMLToStringActivity19.Result}");
            bind_dir747 = new BindDirection(_flow.XMLToStringActivity19,binding_getter765,binding_setter747,BindTargetType.ToInProperty);
            _flow.CodeActivity27.InDirections.Add(bind_dir747);
            VTDPropertyInfoBase pi1513 = new VTDPropertyInfoBase("Output.Back_Doc_Req");
            VTDBaseGetter binding_getter766 = new VTDObjectGetter(pi1513);
            VTDPropertyInfoBase pi1514 = new VTDPropertyInfoBase("Input.Back_Doc_Req");
            VTDBaseSetter binding_setter748 = new VTDObjectSetter(pi1514);
            binding_setter748 = new StringFormaterDecorator(binding_setter748,"{Step.OutputProperties.CodeActivity26.Back_Doc_Req}");
            bind_dir748 = new BindDirection(_flow.CodeActivity26,binding_getter766,binding_setter748,BindTargetType.ToInProperty);
            _flow.CodeActivity27.InDirections.Add(bind_dir748);
            _flow.CodeActivity27.ExecuteEvent += _userCode.CodeActivity27_OnExecuteEvent;
            XmlDocument CallSTTest34_InputProperties_Document = new XmlDocument();
            CallSTTest34_InputProperties_Document.PreserveWhitespace = true;
            CallSTTest34_InputProperties_Document.LoadXml(
@"<Arguments><uuid>{Step.OutputProperties.CodeActivity29.TrackingID}</uuid><timeStamp /><requestXMLMessage>{Step.OutputProperties.CodeActivity17.OutputEscapedXML}</requestXMLMessage><jmsApplicationName /><jmsServiceName /><jmsServiceVersion /><jmsRegionId /><jmsSource /><jmsUserId /><jmsHeaderFlag>false</jmsHeaderFlag><trackingIdFlag>true</trackingIdFlag><postRequestURL>http://s415mt306.detss.corpintra.net:9080/uft-ws/rest/uft/requests</postRequestURL><getResponseUrl>http://s415mt306.detss.corpintra.net:9080/uft-ws/rest/uft/responses?tid=</getResponseUrl><httpMethod>POST</httpMethod><xsdPath /><xsdVersion /><responseDelay>5000</responseDelay><needResponse>false</needResponse><TESTCASE_ID></TESTCASE_ID></Arguments>");
            _flow.CallSTTest34.InputProperties = CallSTTest34_InputProperties_Document;
            _flow.CallSTTest34.Comment = @"";
            _flow.CallSTTest34.IconPath = @"AddIns\ServiceTest\STRunner\ictb_api_test_16x16.png";
            _flow.CallSTTest34.Name = @"DEV_SIB_WS";
            _flow.CallSTTest34.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallSTTest34.ScriptPath}")) ? @"..\DEV_SIB_WS" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallSTTest34.ScriptPath}");
            _flow.CallSTTest34.ActionName = @"";
            _flow.CallSTTest34.ResultLocation = @"RunStReport\";
            VTDPropertyInfoBase pi1515 = new VTDPropertyInfoBase("Output.TrackingID");
            VTDBaseGetter binding_getter767 = new VTDObjectGetter(pi1515);
            VTDPropertyInfoBase pi1516 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='uuid'][1]");
            VTDBaseSetter binding_setter749 = new VTDXPathSetter(pi1516,XmlTypeCode.String);
            binding_setter749 = new StringFormaterDecorator(binding_setter749,"{Step.OutputProperties.CodeActivity29.TrackingID}");
            bind_dir749 = new BindDirection(_flow.CodeActivity29,binding_getter767,binding_setter749,BindTargetType.ToInProperty);
            _flow.CallSTTest34.InDirections.Add(bind_dir749);
            VTDPropertyInfoBase pi1517 = new VTDPropertyInfoBase("Output.OutputEscapedXML");
            VTDBaseGetter binding_getter768 = new VTDObjectGetter(pi1517);
            VTDPropertyInfoBase pi1518 = new VTDPropertyInfoBase("InputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='requestXMLMessage'][1]");
            VTDBaseSetter binding_setter750 = new VTDXPathSetter(pi1518,XmlTypeCode.String);
            binding_setter750 = new StringFormaterDecorator(binding_setter750,"{Step.OutputProperties.CodeActivity17.OutputEscapedXML}");
            bind_dir750 = new BindDirection(_flow.CodeActivity17,binding_getter768,binding_setter750,BindTargetType.ToInProperty);
            _flow.CallSTTest34.InDirections.Add(bind_dir750);
            set_CallSTTest34_checkpoints(_flow.CallSTTest34);
            _flow.CodeActivity28.Input.VCN_REQ_UUID = @"{ENV:Tracking_ID}";
            _flow.CodeActivity28.Input.VCN_REQ_STATUS_CODE = (int)0;
            _flow.CodeActivity28.Comment = @"";
            _flow.CodeActivity28.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.CodeActivity28.Name = @"CA28 - UserID_Included";
            VTDPropertyInfoBase pi1519 = new VTDPropertyInfoBase("Tracking_ID");
            VTDBaseGetter binding_getter769 = new EnvironmentVariableGetter(pi1519);
            VTDPropertyInfoBase pi1520 = new VTDPropertyInfoBase("Input.VCN_REQ_UUID");
            VTDBaseSetter binding_setter751 = new VTDObjectSetter(pi1520);
            binding_setter751 = new StringFormaterDecorator(binding_setter751,"{ENV:Tracking_ID}");
            bind_dir751 = new BindDirection(_flow.StartActivity1,binding_getter769,binding_setter751,BindTargetType.ToInProperty);
            _flow.CodeActivity28.InDirections.Add(bind_dir751);
            VTDPropertyInfoBase pi1521 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='SentMessageStatusCode'][1]");
            VTDBaseGetter binding_getter770 = new VTDXPathGetter(pi1521,XmlTypeCode.String);
            VTDPropertyInfoBase pi1522 = new VTDPropertyInfoBase("Input.VCN_REQ_STATUS_CODE");
            VTDBaseSetter binding_setter752 = new VTDObjectSetter(pi1522);
            bind_dir752 = new BindDirection(_flow.CallSTTest34,binding_getter770,binding_setter752,BindTargetType.ToInProperty);
            _flow.CodeActivity28.InDirections.Add(bind_dir752);
            set_CodeActivity28_checkpoints(_flow.CodeActivity28);
            _flow.CodeActivity28.ExecuteEvent += _userCode.CodeActivity28_OnExecuteEvent;
            _flow.CodeActivity51.Input.Back_Doc_Req = @"{Step.OutputProperties.CodeActivity28.Back_Doc_Req}";
            _flow.CodeActivity51.Input.VehicleChangeNotification = @"{Step.OutputProperties.XMLToStringActivity19.Result}";
            _flow.CodeActivity51.Comment = @"";
            _flow.CodeActivity51.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.CodeActivity51.Name = @"CA51 - Transformation was correct?";
            VTDPropertyInfoBase pi1523 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter771 = new VTDObjectGetter(pi1523);
            VTDPropertyInfoBase pi1524 = new VTDPropertyInfoBase("Input.VehicleChangeNotification");
            VTDBaseSetter binding_setter753 = new VTDObjectSetter(pi1524);
            binding_setter753 = new StringFormaterDecorator(binding_setter753,"{Step.OutputProperties.XMLToStringActivity19.Result}");
            bind_dir753 = new BindDirection(_flow.XMLToStringActivity19,binding_getter771,binding_setter753,BindTargetType.ToInProperty);
            _flow.CodeActivity51.InDirections.Add(bind_dir753);
            VTDPropertyInfoBase pi1525 = new VTDPropertyInfoBase("Output.Back_Doc_Req");
            VTDBaseGetter binding_getter772 = new VTDObjectGetter(pi1525);
            VTDPropertyInfoBase pi1526 = new VTDPropertyInfoBase("Input.Back_Doc_Req");
            VTDBaseSetter binding_setter754 = new VTDObjectSetter(pi1526);
            binding_setter754 = new StringFormaterDecorator(binding_setter754,"{Step.OutputProperties.CodeActivity28.Back_Doc_Req}");
            bind_dir754 = new BindDirection(_flow.CodeActivity28,binding_getter772,binding_setter754,BindTargetType.ToInProperty);
            _flow.CodeActivity51.InDirections.Add(bind_dir754);
            _flow.CodeActivity51.ExecuteEvent += _userCode.CodeActivity51_OnExecuteEvent;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    